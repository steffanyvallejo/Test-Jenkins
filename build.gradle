/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    //mockito
    testImplementation 'org.mockito:mockito-core:2.7.22'
    
    //cucumber
    testCompile 'io.cucumber:cucumber-java:4.7.4'
    testCompile 'io.cucumber:cucumber-junit:4.7.4'
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}
checkstyle {
    configFile file('config/Configuration.xml')
    toolVersion '8.26'             // set Checkstyle version here
    //toolVersion '8.0'      // set Checkstyle version here
}

checkstyleMain {
    source ='src/main'
}

checkstyleTest {
    source ='src/test'
}

findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
}

pmd {
   ignoreFailures = true
    pmdTest.enabled=false
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}


findbugsMain {
    source ='src/main'
}

pmdMain {
    source ='src/main'
}


tasks.withType(Pmd)  {
    reports {
     	html.enabled = true
        html {
            destination file('$reports/pmd/report-nuevo.html')
        }
    }
}

tasks.withType(FindBugs)  {
    reports {
    	xml.enabled = false
     	html.enabled = true
        html {
            destination file("$reports/findbugs/report-nuevo.html")
        }
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
         html {
            destination file("$reports/checkstyle/report-nuevo.html")
        }
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'cucumber', 'src/test/resources','--monochrome']
        }
    }
}

